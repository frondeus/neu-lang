```
{
    health = 10 - 2     ,
    sanity = 50 + 2
}
```

[errors]
No errors

[lexer]
[
    "OpenC `{`",
    "LineEnd `\n`",
    "Whitespace `    `",
    "Identifier `health`",
    "Whitespace ` `",
    "OpAssign `=`",
    "Whitespace ` `",
    "Number `10`",
    "Whitespace ` `",
    "OpMinus `-`",
    "Whitespace ` `",
    "Number `2`",
    "Whitespace `     `",
    "Comma `,`",
    "LineEnd `\n`",
    "Whitespace `    `",
    "Identifier `sanity`",
    "Whitespace ` `",
    "OpAssign `=`",
    "Whitespace ` `",
    "Number `50`",
    "Whitespace ` `",
    "OpPlus `+`",
    "Whitespace ` `",
    "Number `2`",
    "LineEnd `\n`",
    "CloseC `}`",
]

[parser]

--- GREEN TREE ---
Root @ 0..49
    Value, Strukt @ 0..49
        token @ 0..1 `{`
        StruktPair @ 1..26
            Key, identifier, token @ 1..13 `health` ; leading: `\n    ` ; trailing: ` `
            token @ 13..15 `=` ; trailing: ` `
            Value, Binary @ 15..26
                Value, number, token @ 15..18 `10` ; trailing: ` `
                BinaryOp, token @ 18..20 `-` ; trailing: ` `
                Value, number, token @ 20..26 `2` ; trailing: `     `
        token @ 26..27 `,`
        StruktPair @ 27..47
            Key, identifier, token @ 27..39 `sanity` ; leading: `\n    ` ; trailing: ` `
            token @ 39..41 `=` ; trailing: ` `
            Value, Binary @ 41..47
                Value, number, token @ 41..44 `50` ; trailing: ` `
                BinaryOp, token @ 44..46 `+` ; trailing: ` `
                Value, number, token @ 46..47 `2`
        token @ 47..49 `}` ; leading: `\n`
--- END ---


[eval]
`{
    health = 8,
    sanity = 52,
 }`

