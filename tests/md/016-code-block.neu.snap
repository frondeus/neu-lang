`````
md#"
```
{
    health = {
        max = (60 + 70) / 10,
        value = .max
    }
}
```

Here should eval
```neu
5 + 2
```

Here is intended

    2 + 5

But here shouldn't
```example
5 + 2
```

"#
`````

[parser]
ROOT @ 0..197
    MARKDOWN, VALUE @ 0..197
        TOKEN @ 0..4 = `md#\"`
        MD_VALUE @ 5..88
            INTERPOLATED, ROOT @ 9..84
                STRUCT, VALUE @ 9..84
                    TOKEN @ 9..10 = `{`
                    TRIVIA @ 10..15 = `\n    `
                    IDENTIFIER, KEY, TOKEN @ 15..21 = `health`
                    TRIVIA @ 21..22 = ` `
                    TOKEN @ 22..23 = `=`
                    TRIVIA @ 23..24 = ` `
                    STRUCT, VALUE @ 24..82
                        TOKEN @ 24..25 = `{`
                        TRIVIA @ 25..34 = `\n        `
                        IDENTIFIER, KEY, TOKEN @ 34..37 = `max`
                        TRIVIA @ 37..38 = ` `
                        TOKEN @ 38..39 = `=`
                        TRIVIA @ 39..40 = ` `
                        BINARY, VALUE @ 40..54 = `(60 + 70) / 10`
                            PARENS, VALUE @ 40..49 = `(60 + 70)`
                                TOKEN @ 40..41 = `(`
                                BINARY, VALUE @ 41..48 = `60 + 70`
                                    NUMBER, TOKEN, VALUE @ 41..43 = `60`
                                    TRIVIA @ 43..44 = ` `
                                    OP, TOKEN @ 44..45 = `+`
                                    TRIVIA @ 45..46 = ` `
                                    NUMBER, TOKEN, VALUE @ 46..48 = `70`
                                TOKEN @ 48..49 = `)`
                                TRIVIA @ 49..50 = ` `
                            OP, TOKEN @ 50..51 = `/`
                            TRIVIA @ 51..52 = ` `
                            NUMBER, TOKEN, VALUE @ 52..54 = `10`
                        TOKEN @ 54..55 = `,`
                        TRIVIA @ 55..64 = `\n        `
                        IDENTIFIER, KEY, TOKEN @ 64..69 = `value`
                        TRIVIA @ 69..70 = ` `
                        TOKEN @ 70..71 = `=`
                        TRIVIA @ 71..72 = ` `
                        UNARY, VALUE @ 72..76 = `.max`
                            OP, TOKEN @ 72..73 = `.`
                            IDENTIFIER, TOKEN, VALUE @ 73..76 = `max`
                        TRIVIA @ 76..81 = `\n    `
                        TOKEN @ 81..82 = `}`
                    TRIVIA @ 82..83 = `\n`
                    TOKEN @ 83..84 = `}`
                TRIVIA @ 84..85 = `\n`
        MD_PARAGRAPH, MD_VALUE @ 90..107 = `Here should eval\n`
            MD_TEXT @ 90..106 = `Here should eval`
        MD_VALUE @ 107..123 = ````neu\n5 + 2\n````
            INTERPOLATED, ROOT @ 114..119 = `5 + 2`
                BINARY, VALUE @ 114..119 = `5 + 2`
                    NUMBER, TOKEN, VALUE @ 114..115 = `5`
                    TRIVIA @ 115..116 = ` `
                    OP, TOKEN @ 116..117 = `+`
                    TRIVIA @ 117..118 = ` `
                    NUMBER, TOKEN, VALUE @ 118..119 = `2`
                TRIVIA @ 119..120 = `\n`
        MD_PARAGRAPH, MD_VALUE @ 125..142 = `Here is intended\n`
            MD_TEXT @ 125..141 = `Here is intended`
        MD_VALUE @ 147..153 = `2 + 5\n`
            INTERPOLATED, ROOT @ 147..152 = `2 + 5`
                BINARY, VALUE @ 147..152 = `2 + 5`
                    NUMBER, TOKEN, VALUE @ 147..148 = `2`
                    TRIVIA @ 148..149 = ` `
                    OP, TOKEN @ 149..150 = `+`
                    TRIVIA @ 150..151 = ` `
                    NUMBER, TOKEN, VALUE @ 151..152 = `5`
                TRIVIA @ 152..153 = `\n`
        MD_PARAGRAPH, MD_VALUE @ 154..173 = `But here shouldn\'t\n`
            MD_TEXT @ 154..172 = `But here shouldn\'t`
        MD_CODEBLOCK, MD_VALUE @ 173..193 = ````example\n5 + 2\n````
            MD_CODEBLOCKLANG @ 176..183 = `example`
            MD_TEXT @ 184..190 = `5 + 2\n`
        TOKEN @ 195..197 = `\"#`


### No Errors ###


[eval]
`"<pre><code>{\n    health = {\n        max = 13,\n        value = 13,\n    },\n }</code></pre><p>Here should eval</p><pre><code>7</code></pre><p>Here is intended</p><pre><code>7</code></pre><p>But here shouldn\'t</p><pre><code class=\"language-example\">5 + 2\n</code></pre>"`

### No Errors ###

