```
{
    health = 4, /* foo }
    bar */
    sanity = 10, /* baz
}
```

[errors]
test.neu | N17 | Expected identifier but found `/*`
test.neu | N19 | Expected `=` but found `baz`
test.neu | N21 | Expected one of number, `true`, `false`, `-`, `!`, `"`, `(`, `{`, `[`, identifier but found `}`
test.neu | N22 | Expected `}` but found EOF

[lexer]
[
    "OpenC `{`",
    "LineEnd `\n`",
    "Whitespace `    `",
    "Identifier `health`",
    "Whitespace ` `",
    "OpAssign `=`",
    "Whitespace ` `",
    "Number `4`",
    "Comma `,`",
    "Whitespace ` `",
    "BlockComment `/* foo }\n    bar */`",
    "LineEnd `\n`",
    "Whitespace `    `",
    "Identifier `sanity`",
    "Whitespace ` `",
    "OpAssign `=`",
    "Whitespace ` `",
    "Number `10`",
    "Comma `,`",
    "Whitespace ` `",
    "Error `/*`",
    "Whitespace ` `",
    "Identifier `baz`",
    "LineEnd `\n`",
    "CloseC `}`",
]

[parser]

--- GREEN TREE ---
Root @ 0..63
    Value, Strukt @ 0..63
        token @ 0..1 `{`
        StruktPair @ 1..16
            Key, identifier, token @ 1..13 `health` ; leading: `\n    ` ; trailing: ` `
            token @ 13..15 `=` ; trailing: ` `
            Value, number, token @ 15..16 `4`
        token @ 16..37 `,` ; trailing: ` /* foo }\n    bar */`
        StruktPair @ 37..53
            Key, identifier, token @ 37..49 `sanity` ; leading: `\n    ` ; trailing: ` `
            token @ 49..51 `=` ; trailing: ` `
            Value, number, token @ 51..53 `10`
        token @ 53..55 `,` ; trailing: ` `
        StruktPair @ 55..61
            Key, identifier, error @ 55..57 `/*`
            error @ 57..58 ` `
            Value, identifier, token @ 58..61 `baz`
        token @ 61..63 `}` ; leading: `\n`
--- END ---


[eval]
None

