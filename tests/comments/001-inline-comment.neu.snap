```
{
    health = 4, // foo }
    sanity = 10, //bar
}
```

[lexer]
[
    "OpenC `{`",
    "LineEnd `\n`",
    "Whitespace `    `",
    "Identifier `health`",
    "Whitespace ` `",
    "OpAssign `=`",
    "Whitespace ` `",
    "Number `4`",
    "Comma `,`",
    "Whitespace ` `",
    "Comment `// foo }`",
    "LineEnd `\n`",
    "Whitespace `    `",
    "Identifier `sanity`",
    "Whitespace ` `",
    "OpAssign `=`",
    "Whitespace ` `",
    "Number `10`",
    "Comma `,`",
    "Whitespace ` `",
    "Comment `//bar`",
    "LineEnd `\n`",
    "CloseC `}`",
]

[parser]
ROOT @ 0..51 = `{\n    health = 4, // foo }\n    sanity = 10, //bar\n}`
    STRUCT, VALUE @ 0..51 = `{\n    health = 4, // foo }\n    sanity = 10, //bar\n}`
        TOKEN @ 0..1 = `{`
        TRIVIA @ 1..6 = `\n    `
        IDENTIFIER, KEY, TOKEN @ 6..12 = `health`
        TRIVIA @ 12..13 = ` `
        TOKEN @ 13..14 = `=`
        TRIVIA @ 14..15 = ` `
        NUMBER, TOKEN, VALUE @ 15..16 = `4`
        TOKEN @ 16..17 = `,`
        TRIVIA @ 17..26 = ` // foo }`
        TRIVIA @ 26..31 = `\n    `
        IDENTIFIER, KEY, TOKEN @ 31..37 = `sanity`
        TRIVIA @ 37..38 = ` `
        TOKEN @ 38..39 = `=`
        TRIVIA @ 39..40 = ` `
        NUMBER, TOKEN, VALUE @ 40..42 = `10`
        TOKEN @ 42..43 = `,`
        TRIVIA @ 43..49 = ` //bar`
        TRIVIA @ 49..50 = `\n`
        TOKEN @ 50..51 = `}`


### No Errors ###


[eval]
`{
    health = 4,
    sanity = 10,
 }`

### No Errors ###

