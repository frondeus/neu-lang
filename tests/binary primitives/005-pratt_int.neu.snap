```
4 + 2 * 5
```

[lexer]
[
    "Number `4`",
    "Whitespace ` `",
    "OpPlus `+`",
    "Whitespace ` `",
    "Number `2`",
    "Whitespace ` `",
    "OpStar `*`",
    "Whitespace ` `",
    "Number `5`",
]

[parser]
--- GREEN TREE ---
Root, Value, Binary @ 0..9
    Value, number, token @ 0..2 = `4` ; trailing: ` `
    BinaryOp, token @ 2..4 = `+` ; trailing: ` `
    Value, Binary @ 4..9
        Value, number, token @ 4..6 = `2` ; trailing: ` `
        BinaryOp, token @ 6..8 = `*` ; trailing: ` `
        Value, number, token @ 8..9 = `5`
--- END ---


[eval]
`14`

