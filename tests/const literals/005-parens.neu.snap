```
(4 + 2) * 5
```

[lexer]
[
    "OpenP `(`",
    "Number `4`",
    "Whitespace ` `",
    "OpPlus `+`",
    "Whitespace ` `",
    "Number `2`",
    "CloseP `)`",
    "Whitespace ` `",
    "OpStar `*`",
    "Whitespace ` `",
    "Number `5`",
]

[parser]

--- GREEN TREE ---
Root @ 0..11
    Value, Binary @ 0..11
        Value,  @ 0..8
            token @ 0..1 `(`
            Value, Binary @ 1..6
                Value, number, token @ 1..3 `4` ; trailing: ` `
                BinaryOp, token @ 3..5 `+` ; trailing: ` `
                Value, number, token @ 5..6 `2`
            token @ 6..8 `)` ; trailing: ` `
        BinaryOp, token @ 8..10 `*` ; trailing: ` `
        Value, number, token @ 10..11 `5`
--- END ---


[eval]
`30`

